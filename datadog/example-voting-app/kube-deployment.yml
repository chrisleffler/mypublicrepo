# redis
--- 
apiVersion: v1
kind: Service
metadata: 
  labels: 
    app: redis
  name: redis
spec: 
  clusterIP: None
  ports:
  - name: redis-service
    port: 6379
    targetPort: 6379
  selector: 
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
          name: redis

# db
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dd-psql-config
data:
  dd.sql: |
    create user datadog with password 'datadog';
    grant SELECT ON pg_stat_database to datadog;   
--- 
apiVersion: v1
kind: Service
metadata: 
  labels: 
    app: db
  name: db
spec: 
  clusterIP: None
  ports: 
  - name: db
    port: 5432
    targetPort: 5432
  selector: 
    app: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      annotations:
        ad.datadoghq.com/db.logs: '[{"source":"postgresql","service":"postgres"}]'
        ad.datadoghq.com/db.check_names: '["postgres"]'
        ad.datadoghq.com/db.init_configs: '[{}]'
        ad.datadoghq.com/db.instances: |
          [
            {
              "host": "%%host%%",
              "port":"5432",
              "username":"datadog",
              "password":"datadog"
            }
          ]
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: postgres:9.6.24
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        ports:
        - containerPort: 5432
          name: db
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/postgresql/data
        - name: dd-config
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: postgres-pv-claim
      - name: dd-config
        configMap:
          name: dd-psql-config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# result
---
apiVersion: v1
kind: Service
metadata:
  name: result
  labels:
    app: result
spec:
  type: LoadBalancer
  ports:
  - port: 5001
    targetPort: 80
    name: result-service
  selector:
    app: result
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result
  labels:
    app: result
    tags.datadoghq.com/env: "sandbox"
    tags.datadoghq.com/service: "result"
    tags.datadoghq.com/version: "1.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      annotations:
        ad.datadoghq.com/result.logs: '[{"source":"nodejs","service":"result"}]'
      labels:
        app: result
        tags.datadoghq.com/env: "sandbox"
        tags.datadoghq.com/service: "result"
        tags.datadoghq.com/version: "1.0"
    spec:
      containers:
      - name: result
        image: cjl425/result-dd:latest
        ports:
        - containerPort: 80
          name: result
        env:
                - name: DD_AGENT_HOST
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
                - name: DD_ENV
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/env']
                - name: DD_SERVICE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/service']
                - name: DD_VERSION
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/version']
            
                - name: DD_PROFILING_ENABLED
                  value: "true"
                - name: DD_LOGS_INJECTION
                  value: "true"

# vote
---
apiVersion: v1
kind: Service
metadata:
  name: vote
  labels:
    apps: vote
spec:
  type: LoadBalancer
  ports:
    - port: 5000
      targetPort: 80
      name: vote-service
  selector:
    app: vote
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote
  labels:
    app: vote
    tags.datadoghq.com/env: "sandbox"
    tags.datadoghq.com/service: "vote"
    tags.datadoghq.com/version: "1.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      annotations:
        ad.datadoghq.com/vote.logs: '[{"source":"gunicorn","service":"vote"}]'
      labels:
        app: vote
        tags.datadoghq.com/env: "sandbox"
        tags.datadoghq.com/service: "vote"
        tags.datadoghq.com/version: "1.0"
    spec:
      containers:
      - name: vote
        image: cjl425/vote-dd:latest
        ports:
        - containerPort: 80
          name: vote
        env:
                - name: DD_AGENT_HOST
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
                - name: DD_ENV
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/env']
                - name: DD_SERVICE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/service']
                - name: DD_VERSION
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/version']
            
                - name: DD_PROFILING_ENABLED
                  value: "true"
                - name: DD_LOGS_INJECTION
                  value: "true"
                - name: DD_SERVICE_MAPPING
                  value: "redis:vote-redis"

# worker
--- 
apiVersion: v1
kind: Service
metadata: 
  labels: 
    apps: worker
    tags.datadoghq.com/env: "sandbox"
    tags.datadoghq.com/service: "worker"
    tags.datadoghq.com/version: "1.0"
  name: worker
spec: 
  clusterIP: None
  selector: 
    app: worker
--- 
apiVersion: apps/v1
kind: Deployment
metadata: 
  labels: 
    app: worker
  name: worker
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template: 
    metadata: 
      labels: 
        app: worker
        tags.datadoghq.com/env: "sandbox"
        tags.datadoghq.com/service: "worker"
        tags.datadoghq.com/version: "1.0"
    spec: 
      containers: 
      - image: cjl425/worker-net-dd:latest
        name: worker
        env:
                - name: DD_AGENT_HOST
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
                - name: DD_ENV
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/env']
                - name: DD_SERVICE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/service']
                - name: DD_VERSION
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/version']
            
                - name: CORECLR_ENABLE_PROFILING
                  value: "1"
                - name: CORECLR_PROFILER
                  value: "{846F5F1C-F9AE-4B07-969E-05C26BC060D8}"
                - name: CORECLR_PROFILER_PATH
                  value: "/opt/datadog/Datadog.Trace.ClrProfiler.Native.so"
                - name: DD_DOTNET_TRACER_HOME
                  value: "/opt/datadog"
                - name: DD_RUNTIME_METRICS_ENABLED
                  value: "true"